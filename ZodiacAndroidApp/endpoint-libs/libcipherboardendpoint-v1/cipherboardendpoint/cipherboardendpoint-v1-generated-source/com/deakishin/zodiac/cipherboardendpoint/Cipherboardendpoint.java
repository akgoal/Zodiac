/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-10-17 16:43:55 UTC)
 * on 2016-12-06 at 13:33:45 UTC 
 * Modify at your own risk.
 */

package com.deakishin.zodiac.cipherboardendpoint;

/**
 * Service definition for Cipherboardendpoint (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link CipherboardendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Cipherboardendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the cipherboardendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://zodiac-142809.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "cipherboardendpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Cipherboardendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Cipherboardendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "addCipher".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link AddCipher#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @param content the {@link com.deakishin.zodiac.cipherboardendpoint.model.DTOCipherToAdd}
   * @return the request
   */
  public AddCipher addCipher(java.lang.Long userId, com.deakishin.zodiac.cipherboardendpoint.model.DTOCipherToAdd content) throws java.io.IOException {
    AddCipher result = new AddCipher(userId, content);
    initialize(result);
    return result;
  }

  public class AddCipher extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.DTOCipherToAdd> {

    private static final String REST_PATH = "addCipher/{userId}";

    /**
     * Create a request for the method "addCipher".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link AddCipher#execute()} method to invoke the remote
     * operation. <p> {@link
     * AddCipher#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @param content the {@link com.deakishin.zodiac.cipherboardendpoint.model.DTOCipherToAdd}
     * @since 1.13
     */
    protected AddCipher(java.lang.Long userId, com.deakishin.zodiac.cipherboardendpoint.model.DTOCipherToAdd content) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, content, com.deakishin.zodiac.cipherboardendpoint.model.DTOCipherToAdd.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public AddCipher setAlt(java.lang.String alt) {
      return (AddCipher) super.setAlt(alt);
    }

    @Override
    public AddCipher setFields(java.lang.String fields) {
      return (AddCipher) super.setFields(fields);
    }

    @Override
    public AddCipher setKey(java.lang.String key) {
      return (AddCipher) super.setKey(key);
    }

    @Override
    public AddCipher setOauthToken(java.lang.String oauthToken) {
      return (AddCipher) super.setOauthToken(oauthToken);
    }

    @Override
    public AddCipher setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddCipher) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddCipher setQuotaUser(java.lang.String quotaUser) {
      return (AddCipher) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddCipher setUserIp(java.lang.String userIp) {
      return (AddCipher) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public AddCipher setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public AddCipher set(String parameterName, Object value) {
      return (AddCipher) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addLike".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link AddLike#execute()} method to invoke the remote operation.
   *
   * @param cipherId
   * @param userId
   * @param toLike
   * @return the request
   */
  public AddLike addLike(java.lang.Long cipherId, java.lang.Long userId, java.lang.Boolean toLike) throws java.io.IOException {
    AddLike result = new AddLike(cipherId, userId, toLike);
    initialize(result);
    return result;
  }

  public class AddLike extends CipherboardendpointRequest<Void> {

    private static final String REST_PATH = "addLike/{cipherId}/{userId}/{toLike}";

    /**
     * Create a request for the method "addLike".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link AddLike#execute()} method to invoke the remote
     * operation. <p> {@link
     * AddLike#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param cipherId
     * @param userId
     * @param toLike
     * @since 1.13
     */
    protected AddLike(java.lang.Long cipherId, java.lang.Long userId, java.lang.Boolean toLike) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, null, Void.class);
      this.cipherId = com.google.api.client.util.Preconditions.checkNotNull(cipherId, "Required parameter cipherId must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.toLike = com.google.api.client.util.Preconditions.checkNotNull(toLike, "Required parameter toLike must be specified.");
    }

    @Override
    public AddLike setAlt(java.lang.String alt) {
      return (AddLike) super.setAlt(alt);
    }

    @Override
    public AddLike setFields(java.lang.String fields) {
      return (AddLike) super.setFields(fields);
    }

    @Override
    public AddLike setKey(java.lang.String key) {
      return (AddLike) super.setKey(key);
    }

    @Override
    public AddLike setOauthToken(java.lang.String oauthToken) {
      return (AddLike) super.setOauthToken(oauthToken);
    }

    @Override
    public AddLike setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddLike) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddLike setQuotaUser(java.lang.String quotaUser) {
      return (AddLike) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddLike setUserIp(java.lang.String userIp) {
      return (AddLike) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long cipherId;

    /**

     */
    public java.lang.Long getCipherId() {
      return cipherId;
    }

    public AddLike setCipherId(java.lang.Long cipherId) {
      this.cipherId = cipherId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public AddLike setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Boolean toLike;

    /**

     */
    public java.lang.Boolean getToLike() {
      return toLike;
    }

    public AddLike setToLike(java.lang.Boolean toLike) {
      this.toLike = toLike;
      return this;
    }

    @Override
    public AddLike set(String parameterName, Object value) {
      return (AddLike) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addUser".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link AddUser#execute()} method to invoke the remote operation.
   *
   * @param username
   * @param password
   * @return the request
   */
  public AddUser addUser(java.lang.String username, java.lang.String password) throws java.io.IOException {
    AddUser result = new AddUser(username, password);
    initialize(result);
    return result;
  }

  public class AddUser extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.DTOUser> {

    private static final String REST_PATH = "addUser/{username}/{password}";

    /**
     * Create a request for the method "addUser".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link AddUser#execute()} method to invoke the remote
     * operation. <p> {@link
     * AddUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @param password
     * @since 1.13
     */
    protected AddUser(java.lang.String username, java.lang.String password) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, null, com.deakishin.zodiac.cipherboardendpoint.model.DTOUser.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public AddUser setAlt(java.lang.String alt) {
      return (AddUser) super.setAlt(alt);
    }

    @Override
    public AddUser setFields(java.lang.String fields) {
      return (AddUser) super.setFields(fields);
    }

    @Override
    public AddUser setKey(java.lang.String key) {
      return (AddUser) super.setKey(key);
    }

    @Override
    public AddUser setOauthToken(java.lang.String oauthToken) {
      return (AddUser) super.setOauthToken(oauthToken);
    }

    @Override
    public AddUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddUser setQuotaUser(java.lang.String quotaUser) {
      return (AddUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddUser setUserIp(java.lang.String userIp) {
      return (AddUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public AddUser setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public AddUser setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public AddUser set(String parameterName, Object value) {
      return (AddUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "changeSettingsMaxSolvedCount".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link ChangeSettingsMaxSolvedCount#execute()} method to invoke the
   * remote operation.
   *
   * @param password
   * @param maxSolvedCount
   * @return the request
   */
  public ChangeSettingsMaxSolvedCount changeSettingsMaxSolvedCount(java.lang.String password, java.lang.Integer maxSolvedCount) throws java.io.IOException {
    ChangeSettingsMaxSolvedCount result = new ChangeSettingsMaxSolvedCount(password, maxSolvedCount);
    initialize(result);
    return result;
  }

  public class ChangeSettingsMaxSolvedCount extends CipherboardendpointRequest<Void> {

    private static final String REST_PATH = "changeSettingsMaxSolvedCount/{password}/{maxSolvedCount}";

    /**
     * Create a request for the method "changeSettingsMaxSolvedCount".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link ChangeSettingsMaxSolvedCount#execute()} method to
     * invoke the remote operation. <p> {@link ChangeSettingsMaxSolvedCount#initialize(com.google.api.
     * client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
     * instance immediately after invoking the constructor. </p>
     *
     * @param password
     * @param maxSolvedCount
     * @since 1.13
     */
    protected ChangeSettingsMaxSolvedCount(java.lang.String password, java.lang.Integer maxSolvedCount) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, null, Void.class);
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.maxSolvedCount = com.google.api.client.util.Preconditions.checkNotNull(maxSolvedCount, "Required parameter maxSolvedCount must be specified.");
    }

    @Override
    public ChangeSettingsMaxSolvedCount setAlt(java.lang.String alt) {
      return (ChangeSettingsMaxSolvedCount) super.setAlt(alt);
    }

    @Override
    public ChangeSettingsMaxSolvedCount setFields(java.lang.String fields) {
      return (ChangeSettingsMaxSolvedCount) super.setFields(fields);
    }

    @Override
    public ChangeSettingsMaxSolvedCount setKey(java.lang.String key) {
      return (ChangeSettingsMaxSolvedCount) super.setKey(key);
    }

    @Override
    public ChangeSettingsMaxSolvedCount setOauthToken(java.lang.String oauthToken) {
      return (ChangeSettingsMaxSolvedCount) super.setOauthToken(oauthToken);
    }

    @Override
    public ChangeSettingsMaxSolvedCount setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ChangeSettingsMaxSolvedCount) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ChangeSettingsMaxSolvedCount setQuotaUser(java.lang.String quotaUser) {
      return (ChangeSettingsMaxSolvedCount) super.setQuotaUser(quotaUser);
    }

    @Override
    public ChangeSettingsMaxSolvedCount setUserIp(java.lang.String userIp) {
      return (ChangeSettingsMaxSolvedCount) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public ChangeSettingsMaxSolvedCount setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer maxSolvedCount;

    /**

     */
    public java.lang.Integer getMaxSolvedCount() {
      return maxSolvedCount;
    }

    public ChangeSettingsMaxSolvedCount setMaxSolvedCount(java.lang.Integer maxSolvedCount) {
      this.maxSolvedCount = maxSolvedCount;
      return this;
    }

    @Override
    public ChangeSettingsMaxSolvedCount set(String parameterName, Object value) {
      return (ChangeSettingsMaxSolvedCount) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "changeUserAvatarMarkup".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link ChangeUserAvatarMarkup#execute()} method to invoke the
   * remote operation.
   *
   * @param userId
   * @return the request
   */
  public ChangeUserAvatarMarkup changeUserAvatarMarkup(java.lang.Long userId) throws java.io.IOException {
    ChangeUserAvatarMarkup result = new ChangeUserAvatarMarkup(userId);
    initialize(result);
    return result;
  }

  public class ChangeUserAvatarMarkup extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.DTOUser> {

    private static final String REST_PATH = "changeUserAvatarMarkup/{userId}";

    /**
     * Create a request for the method "changeUserAvatarMarkup".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link ChangeUserAvatarMarkup#execute()} method to invoke the
     * remote operation. <p> {@link ChangeUserAvatarMarkup#initialize(com.google.api.client.googleapis
     * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected ChangeUserAvatarMarkup(java.lang.Long userId) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, null, com.deakishin.zodiac.cipherboardendpoint.model.DTOUser.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public ChangeUserAvatarMarkup setAlt(java.lang.String alt) {
      return (ChangeUserAvatarMarkup) super.setAlt(alt);
    }

    @Override
    public ChangeUserAvatarMarkup setFields(java.lang.String fields) {
      return (ChangeUserAvatarMarkup) super.setFields(fields);
    }

    @Override
    public ChangeUserAvatarMarkup setKey(java.lang.String key) {
      return (ChangeUserAvatarMarkup) super.setKey(key);
    }

    @Override
    public ChangeUserAvatarMarkup setOauthToken(java.lang.String oauthToken) {
      return (ChangeUserAvatarMarkup) super.setOauthToken(oauthToken);
    }

    @Override
    public ChangeUserAvatarMarkup setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ChangeUserAvatarMarkup) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ChangeUserAvatarMarkup setQuotaUser(java.lang.String quotaUser) {
      return (ChangeUserAvatarMarkup) super.setQuotaUser(quotaUser);
    }

    @Override
    public ChangeUserAvatarMarkup setUserIp(java.lang.String userIp) {
      return (ChangeUserAvatarMarkup) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public ChangeUserAvatarMarkup setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String avatarMarkup;

    /**

     */
    public java.lang.String getAvatarMarkup() {
      return avatarMarkup;
    }

    public ChangeUserAvatarMarkup setAvatarMarkup(java.lang.String avatarMarkup) {
      this.avatarMarkup = avatarMarkup;
      return this;
    }

    @Override
    public ChangeUserAvatarMarkup set(String parameterName, Object value) {
      return (ChangeUserAvatarMarkup) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "checkSolution".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link CheckSolution#execute()} method to invoke the remote
   * operation.
   *
   * @param cipherId
   * @param userId
   * @param solution
   * @return the request
   */
  public CheckSolution checkSolution(java.lang.Long cipherId, java.lang.Long userId, java.lang.String solution) throws java.io.IOException {
    CheckSolution result = new CheckSolution(cipherId, userId, solution);
    initialize(result);
    return result;
  }

  public class CheckSolution extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.DTOSolutionCheckingResult> {

    private static final String REST_PATH = "checkSolution/{cipherId}/{userId}/{solution}";

    /**
     * Create a request for the method "checkSolution".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link CheckSolution#execute()} method to invoke the remote
     * operation. <p> {@link CheckSolution#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param cipherId
     * @param userId
     * @param solution
     * @since 1.13
     */
    protected CheckSolution(java.lang.Long cipherId, java.lang.Long userId, java.lang.String solution) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, null, com.deakishin.zodiac.cipherboardendpoint.model.DTOSolutionCheckingResult.class);
      this.cipherId = com.google.api.client.util.Preconditions.checkNotNull(cipherId, "Required parameter cipherId must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.solution = com.google.api.client.util.Preconditions.checkNotNull(solution, "Required parameter solution must be specified.");
    }

    @Override
    public CheckSolution setAlt(java.lang.String alt) {
      return (CheckSolution) super.setAlt(alt);
    }

    @Override
    public CheckSolution setFields(java.lang.String fields) {
      return (CheckSolution) super.setFields(fields);
    }

    @Override
    public CheckSolution setKey(java.lang.String key) {
      return (CheckSolution) super.setKey(key);
    }

    @Override
    public CheckSolution setOauthToken(java.lang.String oauthToken) {
      return (CheckSolution) super.setOauthToken(oauthToken);
    }

    @Override
    public CheckSolution setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CheckSolution) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CheckSolution setQuotaUser(java.lang.String quotaUser) {
      return (CheckSolution) super.setQuotaUser(quotaUser);
    }

    @Override
    public CheckSolution setUserIp(java.lang.String userIp) {
      return (CheckSolution) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long cipherId;

    /**

     */
    public java.lang.Long getCipherId() {
      return cipherId;
    }

    public CheckSolution setCipherId(java.lang.Long cipherId) {
      this.cipherId = cipherId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public CheckSolution setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String solution;

    /**

     */
    public java.lang.String getSolution() {
      return solution;
    }

    public CheckSolution setSolution(java.lang.String solution) {
      this.solution = solution;
      return this;
    }

    @Override
    public CheckSolution set(String parameterName, Object value) {
      return (CheckSolution) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteCipher".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link DeleteCipher#execute()} method to invoke the remote
   * operation.
   *
   * @param cipherId
   * @param password
   * @return the request
   */
  public DeleteCipher deleteCipher(java.lang.Long cipherId, java.lang.String password) throws java.io.IOException {
    DeleteCipher result = new DeleteCipher(cipherId, password);
    initialize(result);
    return result;
  }

  public class DeleteCipher extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.DSCipher> {

    private static final String REST_PATH = "cipher/{cipherId}/{password}";

    /**
     * Create a request for the method "deleteCipher".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link DeleteCipher#execute()} method to invoke the remote
     * operation. <p> {@link
     * DeleteCipher#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param cipherId
     * @param password
     * @since 1.13
     */
    protected DeleteCipher(java.lang.Long cipherId, java.lang.String password) {
      super(Cipherboardendpoint.this, "DELETE", REST_PATH, null, com.deakishin.zodiac.cipherboardendpoint.model.DSCipher.class);
      this.cipherId = com.google.api.client.util.Preconditions.checkNotNull(cipherId, "Required parameter cipherId must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public DeleteCipher setAlt(java.lang.String alt) {
      return (DeleteCipher) super.setAlt(alt);
    }

    @Override
    public DeleteCipher setFields(java.lang.String fields) {
      return (DeleteCipher) super.setFields(fields);
    }

    @Override
    public DeleteCipher setKey(java.lang.String key) {
      return (DeleteCipher) super.setKey(key);
    }

    @Override
    public DeleteCipher setOauthToken(java.lang.String oauthToken) {
      return (DeleteCipher) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteCipher setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteCipher) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteCipher setQuotaUser(java.lang.String quotaUser) {
      return (DeleteCipher) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteCipher setUserIp(java.lang.String userIp) {
      return (DeleteCipher) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long cipherId;

    /**

     */
    public java.lang.Long getCipherId() {
      return cipherId;
    }

    public DeleteCipher setCipherId(java.lang.Long cipherId) {
      this.cipherId = cipherId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public DeleteCipher setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public DeleteCipher set(String parameterName, Object value) {
      return (DeleteCipher) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "flushDeleted".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link FlushDeleted#execute()} method to invoke the remote
   * operation.
   *
   * @param password
   * @return the request
   */
  public FlushDeleted flushDeleted(java.lang.String password) throws java.io.IOException {
    FlushDeleted result = new FlushDeleted(password);
    initialize(result);
    return result;
  }

  public class FlushDeleted extends CipherboardendpointRequest<Void> {

    private static final String REST_PATH = "flushDeleted/{password}";

    /**
     * Create a request for the method "flushDeleted".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link FlushDeleted#execute()} method to invoke the remote
     * operation. <p> {@link
     * FlushDeleted#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param password
     * @since 1.13
     */
    protected FlushDeleted(java.lang.String password) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, null, Void.class);
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public FlushDeleted setAlt(java.lang.String alt) {
      return (FlushDeleted) super.setAlt(alt);
    }

    @Override
    public FlushDeleted setFields(java.lang.String fields) {
      return (FlushDeleted) super.setFields(fields);
    }

    @Override
    public FlushDeleted setKey(java.lang.String key) {
      return (FlushDeleted) super.setKey(key);
    }

    @Override
    public FlushDeleted setOauthToken(java.lang.String oauthToken) {
      return (FlushDeleted) super.setOauthToken(oauthToken);
    }

    @Override
    public FlushDeleted setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FlushDeleted) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FlushDeleted setQuotaUser(java.lang.String quotaUser) {
      return (FlushDeleted) super.setQuotaUser(quotaUser);
    }

    @Override
    public FlushDeleted setUserIp(java.lang.String userIp) {
      return (FlushDeleted) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public FlushDeleted setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public FlushDeleted set(String parameterName, Object value) {
      return (FlushDeleted) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getCiphers".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link GetCiphers#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public GetCiphers getCiphers() throws java.io.IOException {
    GetCiphers result = new GetCiphers();
    initialize(result);
    return result;
  }

  public class GetCiphers extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.CollectionResponseDTOCipher> {

    private static final String REST_PATH = "collectionresponse_dtocipher";

    /**
     * Create a request for the method "getCiphers".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link GetCiphers#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetCiphers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected GetCiphers() {
      super(Cipherboardendpoint.this, "GET", REST_PATH, null, com.deakishin.zodiac.cipherboardendpoint.model.CollectionResponseDTOCipher.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetCiphers setAlt(java.lang.String alt) {
      return (GetCiphers) super.setAlt(alt);
    }

    @Override
    public GetCiphers setFields(java.lang.String fields) {
      return (GetCiphers) super.setFields(fields);
    }

    @Override
    public GetCiphers setKey(java.lang.String key) {
      return (GetCiphers) super.setKey(key);
    }

    @Override
    public GetCiphers setOauthToken(java.lang.String oauthToken) {
      return (GetCiphers) super.setOauthToken(oauthToken);
    }

    @Override
    public GetCiphers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetCiphers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetCiphers setQuotaUser(java.lang.String quotaUser) {
      return (GetCiphers) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetCiphers setUserIp(java.lang.String userIp) {
      return (GetCiphers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String searchString;

    /**

     */
    public java.lang.String getSearchString() {
      return searchString;
    }

    public GetCiphers setSearchString(java.lang.String searchString) {
      this.searchString = searchString;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetCiphers setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public GetCiphers setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer solvedFilterCode;

    /**

     */
    public java.lang.Integer getSolvedFilterCode() {
      return solvedFilterCode;
    }

    public GetCiphers setSolvedFilterCode(java.lang.Integer solvedFilterCode) {
      this.solvedFilterCode = solvedFilterCode;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public GetCiphers setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer sortbyCode;

    /**

     */
    public java.lang.Integer getSortbyCode() {
      return sortbyCode;
    }

    public GetCiphers setSortbyCode(java.lang.Integer sortbyCode) {
      this.sortbyCode = sortbyCode;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer first;

    /**

     */
    public java.lang.Integer getFirst() {
      return first;
    }

    public GetCiphers setFirst(java.lang.Integer first) {
      this.first = first;
      return this;
    }

    @Override
    public GetCiphers set(String parameterName, Object value) {
      return (GetCiphers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getTopUsers".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link GetTopUsers#execute()} method to invoke the remote
   * operation.
   *
   * @param limit
   * @return the request
   */
  public GetTopUsers getTopUsers(java.lang.Integer limit) throws java.io.IOException {
    GetTopUsers result = new GetTopUsers(limit);
    initialize(result);
    return result;
  }

  public class GetTopUsers extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.CollectionResponseDTOUserStats> {

    private static final String REST_PATH = "collectionresponse_dtouserstats/{limit}";

    /**
     * Create a request for the method "getTopUsers".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link GetTopUsers#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetTopUsers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param limit
     * @since 1.13
     */
    protected GetTopUsers(java.lang.Integer limit) {
      super(Cipherboardendpoint.this, "GET", REST_PATH, null, com.deakishin.zodiac.cipherboardendpoint.model.CollectionResponseDTOUserStats.class);
      this.limit = com.google.api.client.util.Preconditions.checkNotNull(limit, "Required parameter limit must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetTopUsers setAlt(java.lang.String alt) {
      return (GetTopUsers) super.setAlt(alt);
    }

    @Override
    public GetTopUsers setFields(java.lang.String fields) {
      return (GetTopUsers) super.setFields(fields);
    }

    @Override
    public GetTopUsers setKey(java.lang.String key) {
      return (GetTopUsers) super.setKey(key);
    }

    @Override
    public GetTopUsers setOauthToken(java.lang.String oauthToken) {
      return (GetTopUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public GetTopUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetTopUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetTopUsers setQuotaUser(java.lang.String quotaUser) {
      return (GetTopUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetTopUsers setUserIp(java.lang.String userIp) {
      return (GetTopUsers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public GetTopUsers setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetTopUsers setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public GetTopUsers set(String parameterName, Object value) {
      return (GetTopUsers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUser".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
   *
   * @param username
   * @param password
   * @return the request
   */
  public GetUser getUser(java.lang.String username, java.lang.String password) throws java.io.IOException {
    GetUser result = new GetUser(username, password);
    initialize(result);
    return result;
  }

  public class GetUser extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.DTOUser> {

    private static final String REST_PATH = "dtouser/{username}/{password}";

    /**
     * Create a request for the method "getUser".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link GetUser#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @param password
     * @since 1.13
     */
    protected GetUser(java.lang.String username, java.lang.String password) {
      super(Cipherboardendpoint.this, "GET", REST_PATH, null, com.deakishin.zodiac.cipherboardendpoint.model.DTOUser.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUser setAlt(java.lang.String alt) {
      return (GetUser) super.setAlt(alt);
    }

    @Override
    public GetUser setFields(java.lang.String fields) {
      return (GetUser) super.setFields(fields);
    }

    @Override
    public GetUser setKey(java.lang.String key) {
      return (GetUser) super.setKey(key);
    }

    @Override
    public GetUser setOauthToken(java.lang.String oauthToken) {
      return (GetUser) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUser setQuotaUser(java.lang.String quotaUser) {
      return (GetUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUser setUserIp(java.lang.String userIp) {
      return (GetUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public GetUser setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public GetUser setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public GetUser set(String parameterName, Object value) {
      return (GetUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUserStats".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link GetUserStats#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @return the request
   */
  public GetUserStats getUserStats(java.lang.Long userId) throws java.io.IOException {
    GetUserStats result = new GetUserStats(userId);
    initialize(result);
    return result;
  }

  public class GetUserStats extends CipherboardendpointRequest<com.deakishin.zodiac.cipherboardendpoint.model.DTOUserAdvancedStats> {

    private static final String REST_PATH = "dtouseradvancedstats/{userId}";

    /**
     * Create a request for the method "getUserStats".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link GetUserStats#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetUserStats#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected GetUserStats(java.lang.Long userId) {
      super(Cipherboardendpoint.this, "GET", REST_PATH, null, com.deakishin.zodiac.cipherboardendpoint.model.DTOUserAdvancedStats.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUserStats setAlt(java.lang.String alt) {
      return (GetUserStats) super.setAlt(alt);
    }

    @Override
    public GetUserStats setFields(java.lang.String fields) {
      return (GetUserStats) super.setFields(fields);
    }

    @Override
    public GetUserStats setKey(java.lang.String key) {
      return (GetUserStats) super.setKey(key);
    }

    @Override
    public GetUserStats setOauthToken(java.lang.String oauthToken) {
      return (GetUserStats) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUserStats setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUserStats) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUserStats setQuotaUser(java.lang.String quotaUser) {
      return (GetUserStats) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUserStats setUserIp(java.lang.String userIp) {
      return (GetUserStats) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetUserStats setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public GetUserStats set(String parameterName, Object value) {
      return (GetUserStats) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "increaseSolvingCount".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link IncreaseSolvingCount#execute()} method to invoke the remote
   * operation.
   *
   * @param cipherId
   * @return the request
   */
  public IncreaseSolvingCount increaseSolvingCount(java.lang.Long cipherId) throws java.io.IOException {
    IncreaseSolvingCount result = new IncreaseSolvingCount(cipherId);
    initialize(result);
    return result;
  }

  public class IncreaseSolvingCount extends CipherboardendpointRequest<Void> {

    private static final String REST_PATH = "increaseSolvingCount/{cipherId}";

    /**
     * Create a request for the method "increaseSolvingCount".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link IncreaseSolvingCount#execute()} method to invoke the
     * remote operation. <p> {@link IncreaseSolvingCount#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param cipherId
     * @since 1.13
     */
    protected IncreaseSolvingCount(java.lang.Long cipherId) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, null, Void.class);
      this.cipherId = com.google.api.client.util.Preconditions.checkNotNull(cipherId, "Required parameter cipherId must be specified.");
    }

    @Override
    public IncreaseSolvingCount setAlt(java.lang.String alt) {
      return (IncreaseSolvingCount) super.setAlt(alt);
    }

    @Override
    public IncreaseSolvingCount setFields(java.lang.String fields) {
      return (IncreaseSolvingCount) super.setFields(fields);
    }

    @Override
    public IncreaseSolvingCount setKey(java.lang.String key) {
      return (IncreaseSolvingCount) super.setKey(key);
    }

    @Override
    public IncreaseSolvingCount setOauthToken(java.lang.String oauthToken) {
      return (IncreaseSolvingCount) super.setOauthToken(oauthToken);
    }

    @Override
    public IncreaseSolvingCount setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (IncreaseSolvingCount) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public IncreaseSolvingCount setQuotaUser(java.lang.String quotaUser) {
      return (IncreaseSolvingCount) super.setQuotaUser(quotaUser);
    }

    @Override
    public IncreaseSolvingCount setUserIp(java.lang.String userIp) {
      return (IncreaseSolvingCount) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long cipherId;

    /**

     */
    public java.lang.Long getCipherId() {
      return cipherId;
    }

    public IncreaseSolvingCount setCipherId(java.lang.Long cipherId) {
      this.cipherId = cipherId;
      return this;
    }

    @Override
    public IncreaseSolvingCount set(String parameterName, Object value) {
      return (IncreaseSolvingCount) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "rebuildUsersRatingsByDifficulty".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link RebuildUsersRatingsByDifficulty#execute()} method to invoke
   * the remote operation.
   *
   * @param password
   * @return the request
   */
  public RebuildUsersRatingsByDifficulty rebuildUsersRatingsByDifficulty(java.lang.String password) throws java.io.IOException {
    RebuildUsersRatingsByDifficulty result = new RebuildUsersRatingsByDifficulty(password);
    initialize(result);
    return result;
  }

  public class RebuildUsersRatingsByDifficulty extends CipherboardendpointRequest<Void> {

    private static final String REST_PATH = "cipherboardendpoint/users";

    /**
     * Create a request for the method "rebuildUsersRatingsByDifficulty".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link RebuildUsersRatingsByDifficulty#execute()} method to
     * invoke the remote operation. <p> {@link RebuildUsersRatingsByDifficulty#initialize(com.google.a
     * pi.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
     * instance immediately after invoking the constructor. </p>
     *
     * @param password
     * @since 1.13
     */
    protected RebuildUsersRatingsByDifficulty(java.lang.String password) {
      super(Cipherboardendpoint.this, "POST", REST_PATH, null, Void.class);
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public RebuildUsersRatingsByDifficulty setAlt(java.lang.String alt) {
      return (RebuildUsersRatingsByDifficulty) super.setAlt(alt);
    }

    @Override
    public RebuildUsersRatingsByDifficulty setFields(java.lang.String fields) {
      return (RebuildUsersRatingsByDifficulty) super.setFields(fields);
    }

    @Override
    public RebuildUsersRatingsByDifficulty setKey(java.lang.String key) {
      return (RebuildUsersRatingsByDifficulty) super.setKey(key);
    }

    @Override
    public RebuildUsersRatingsByDifficulty setOauthToken(java.lang.String oauthToken) {
      return (RebuildUsersRatingsByDifficulty) super.setOauthToken(oauthToken);
    }

    @Override
    public RebuildUsersRatingsByDifficulty setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RebuildUsersRatingsByDifficulty) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RebuildUsersRatingsByDifficulty setQuotaUser(java.lang.String quotaUser) {
      return (RebuildUsersRatingsByDifficulty) super.setQuotaUser(quotaUser);
    }

    @Override
    public RebuildUsersRatingsByDifficulty setUserIp(java.lang.String userIp) {
      return (RebuildUsersRatingsByDifficulty) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public RebuildUsersRatingsByDifficulty setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public RebuildUsersRatingsByDifficulty set(String parameterName, Object value) {
      return (RebuildUsersRatingsByDifficulty) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateStoredCiphers".
   *
   * This request holds the parameters needed by the cipherboardendpoint server.  After setting any
   * optional parameters, call the {@link UpdateStoredCiphers#execute()} method to invoke the remote
   * operation.
   *
   * @param password
   * @return the request
   */
  public UpdateStoredCiphers updateStoredCiphers(java.lang.String password) throws java.io.IOException {
    UpdateStoredCiphers result = new UpdateStoredCiphers(password);
    initialize(result);
    return result;
  }

  public class UpdateStoredCiphers extends CipherboardendpointRequest<Void> {

    private static final String REST_PATH = "void/{password}";

    /**
     * Create a request for the method "updateStoredCiphers".
     *
     * This request holds the parameters needed by the the cipherboardendpoint server.  After setting
     * any optional parameters, call the {@link UpdateStoredCiphers#execute()} method to invoke the
     * remote operation. <p> {@link UpdateStoredCiphers#initialize(com.google.api.client.googleapis.se
     * rvices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param password
     * @since 1.13
     */
    protected UpdateStoredCiphers(java.lang.String password) {
      super(Cipherboardendpoint.this, "PUT", REST_PATH, null, Void.class);
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public UpdateStoredCiphers setAlt(java.lang.String alt) {
      return (UpdateStoredCiphers) super.setAlt(alt);
    }

    @Override
    public UpdateStoredCiphers setFields(java.lang.String fields) {
      return (UpdateStoredCiphers) super.setFields(fields);
    }

    @Override
    public UpdateStoredCiphers setKey(java.lang.String key) {
      return (UpdateStoredCiphers) super.setKey(key);
    }

    @Override
    public UpdateStoredCiphers setOauthToken(java.lang.String oauthToken) {
      return (UpdateStoredCiphers) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateStoredCiphers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateStoredCiphers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateStoredCiphers setQuotaUser(java.lang.String quotaUser) {
      return (UpdateStoredCiphers) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateStoredCiphers setUserIp(java.lang.String userIp) {
      return (UpdateStoredCiphers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public UpdateStoredCiphers setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Boolean updateAll;

    /**

     */
    public java.lang.Boolean getUpdateAll() {
      return updateAll;
    }

    public UpdateStoredCiphers setUpdateAll(java.lang.Boolean updateAll) {
      this.updateAll = updateAll;
      return this;
    }

    @Override
    public UpdateStoredCiphers set(String parameterName, Object value) {
      return (UpdateStoredCiphers) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Cipherboardendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Cipherboardendpoint}. */
    @Override
    public Cipherboardendpoint build() {
      return new Cipherboardendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link CipherboardendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setCipherboardendpointRequestInitializer(
        CipherboardendpointRequestInitializer cipherboardendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(cipherboardendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
