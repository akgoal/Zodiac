package zodiacdesktopapp.gui.markingdialog;

import zodiacdesktopapp.gui.filedialogs.SaveFileDialog;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import zodiacdesktopapp.gui.drawables.Image;
import zodiacdesktopapp.model.marking.MarkUpManager;
import zodiacdesktopapp.model.settings.Settings;

/**
 *
 * @author Dmitry Akishin
 */
public class MarkUpWindow extends javax.swing.JFrame {
    /*
        Окно разметки изображения.
    */
    
    /* Менеджер разметки. */
    private MarkUpManager markUpManager;

    /* Окно состоит из двух панелей, расположенные карточно - один над другим. */
    private CardLayout cardLayout;

    /* Слушатель окончания разметки. */
    private OnMarkedListener listener;

    /* Родительское окно. Необходимо для того, чтобы
        сделать текущее окно модальным. */
    private java.awt.Frame parent;

    public MarkUpWindow(java.awt.Frame parent, Image image, OnMarkedListener listener) {
        super();
        this.parent = parent;
        this.listener = listener;
        initComponents();
        markUpManager = new MarkUpManager(image.getImg());
        gridImgPanel.setImg(image);
        setGridValues();
        gridImgPanel.repaint();
        setLocation(parent.getX() + 100, parent.getY() + 100);
        setVisible(true);
        setModality(true);

        pack();
    }

    public interface OnMarkedListener {

        void setMarkedFile(String markedFile);
    }

    /* Установка модальности окна. */
    private void setModality(boolean modality) {
        parent.setFocusable(!modality);
        parent.setEnabled(!modality);
        parent.requestFocus();
    }

    /* Установка значения решетки из введеных в поля значений.
        Решетка рисуется поверх изображения на панели gridImgPanel. */
    private void setGridValues() {
        gridImgPanel.setGrid((int) xOffsetSpinner.getValue(),
                (int) yOffsetSpinner.getValue(),
                (int) cellWidthSpinner.getValue(),
                (int) cellHeightSpinner.getValue(),
                (int) gridWidthSpinner.getValue(),
                (int) gridHeightSpinner.getValue());
        int[] maxGridSize = gridImgPanel.getMaxGridSize();
        SpinnerNumberModel model = (SpinnerNumberModel) gridWidthSpinner.getModel();
        model.setMaximum(maxGridSize[0]);
        if ((int) model.getValue() > maxGridSize[0]) {
            model.setValue(maxGridSize[0]);
        }
        model = (SpinnerNumberModel) gridHeightSpinner.getModel();
        model.setMaximum(maxGridSize[1]);
        if ((int) model.getValue() > maxGridSize[1]) {
            model.setValue(maxGridSize[1]);
        }
    }

    public MarkUpWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        gridCardPanel = new javax.swing.JPanel();
        gridPanel = new javax.swing.JPanel();
        gridImgPanel = new zodiacdesktopapp.gui.markingdialog.GridImgPanel();
        jPanel1 = new javax.swing.JPanel();
        xOffsetSpinner = new javax.swing.JSpinner();
        yOffsetSpinner = new javax.swing.JSpinner();
        gridHeightSpinner = new javax.swing.JSpinner();
        cellHeightSpinner = new javax.swing.JSpinner();
        cellWidthSpinner = new javax.swing.JSpinner();
        gridWidthSpinner = new javax.swing.JSpinner();
        nextButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        markUpCardPanel = new javax.swing.JPanel();
        markUpPanel = new javax.swing.JPanel();
        markUpImgPanel = new zodiacdesktopapp.gui.markingdialog.MarkUpImgPanel();
        jPanel2 = new javax.swing.JPanel();
        nextSymbolButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        prevSymbolButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Markup");
        setMinimumSize(new java.awt.Dimension(500, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        mainPanel.setMinimumSize(new java.awt.Dimension(50, 50));
        mainPanel.setLayout(new java.awt.CardLayout());

        gridCardPanel.setMinimumSize(new java.awt.Dimension(100, 100));

        gridImgPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        gridImgPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout gridImgPanelLayout = new javax.swing.GroupLayout(gridImgPanel);
        gridImgPanel.setLayout(gridImgPanelLayout);
        gridImgPanelLayout.setHorizontalGroup(
            gridImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 415, Short.MAX_VALUE)
        );
        gridImgPanelLayout.setVerticalGroup(
            gridImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout gridPanelLayout = new javax.swing.GroupLayout(gridPanel);
        gridPanel.setLayout(gridPanelLayout);
        gridPanelLayout.setHorizontalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gridImgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        gridPanelLayout.setVerticalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gridImgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        xOffsetSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 0, null, 1));
        xOffsetSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xOffsetSpinnerStateChanged(evt);
            }
        });

        yOffsetSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 0, null, 1));
        yOffsetSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yOffsetSpinnerStateChanged(evt);
            }
        });

        gridHeightSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 1));
        gridHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gridHeightSpinnerStateChanged(evt);
            }
        });

        cellHeightSpinner.setModel(new javax.swing.SpinnerNumberModel(20, 1, null, 1));
        cellHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cellHeightSpinnerStateChanged(evt);
            }
        });

        cellWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(20, 1, null, 1));
        cellWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cellWidthSpinnerStateChanged(evt);
            }
        });

        gridWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 1));
        gridWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gridWidthSpinnerStateChanged(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.setFocusable(false);
        nextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("offset x");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("offset y");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("cell width");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("cell height");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("grid width");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("grid height");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gridHeightSpinner)
                            .addComponent(gridWidthSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cellHeightSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cellWidthSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(yOffsetSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(xOffsetSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xOffsetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yOffsetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cellWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cellHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(nextButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout gridCardPanelLayout = new javax.swing.GroupLayout(gridCardPanel);
        gridCardPanel.setLayout(gridCardPanelLayout);
        gridCardPanelLayout.setHorizontalGroup(
            gridCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gridCardPanelLayout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addComponent(gridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        gridCardPanelLayout.setVerticalGroup(
            gridCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gridCardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gridCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(gridCardPanelLayout.createSequentialGroup()
                        .addGap(0, 35, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 34, Short.MAX_VALUE)))
                .addContainerGap())
        );

        mainPanel.add(gridCardPanel, "gridCard");

        markUpImgPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout markUpImgPanelLayout = new javax.swing.GroupLayout(markUpImgPanel);
        markUpImgPanel.setLayout(markUpImgPanelLayout);
        markUpImgPanelLayout.setHorizontalGroup(
            markUpImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 441, Short.MAX_VALUE)
        );
        markUpImgPanelLayout.setVerticalGroup(
            markUpImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout markUpPanelLayout = new javax.swing.GroupLayout(markUpPanel);
        markUpPanel.setLayout(markUpPanelLayout);
        markUpPanelLayout.setHorizontalGroup(
            markUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(markUpImgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        markUpPanelLayout.setVerticalGroup(
            markUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(markUpImgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        nextSymbolButton.setText("Next symbol");
        nextSymbolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextSymbolButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        prevSymbolButton.setText("Previous symbol");
        prevSymbolButton.setEnabled(false);
        prevSymbolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevSymbolButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nextSymbolButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doneButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(prevSymbolButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(backButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addGap(18, 18, 18)
                .addComponent(prevSymbolButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextSymbolButton)
                .addGap(18, 18, 18)
                .addComponent(doneButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout markUpCardPanelLayout = new javax.swing.GroupLayout(markUpCardPanel);
        markUpCardPanel.setLayout(markUpCardPanelLayout);
        markUpCardPanelLayout.setHorizontalGroup(
            markUpCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markUpCardPanelLayout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(markUpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        markUpCardPanelLayout.setVerticalGroup(
            markUpCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markUpCardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(markUpCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(markUpPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(markUpCardPanelLayout.createSequentialGroup()
                        .addGap(0, 93, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 93, Short.MAX_VALUE)))
                .addContainerGap())
        );

        mainPanel.add(markUpCardPanel, "markUpCard");

        getContentPane().add(mainPanel, "card4");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* При изменении значений полей ввода параметров решетки, 
        решетка перерисовывается. */
    private void xOffsetSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xOffsetSpinnerStateChanged
        setGridValues();
    }//GEN-LAST:event_xOffsetSpinnerStateChanged

    private void yOffsetSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yOffsetSpinnerStateChanged
        setGridValues();
    }//GEN-LAST:event_yOffsetSpinnerStateChanged

    private void gridHeightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gridHeightSpinnerStateChanged
        setGridValues();
    }//GEN-LAST:event_gridHeightSpinnerStateChanged

    private void cellHeightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cellHeightSpinnerStateChanged
        setGridValues();
    }//GEN-LAST:event_cellHeightSpinnerStateChanged

    private void cellWidthSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cellWidthSpinnerStateChanged
        setGridValues();
    }//GEN-LAST:event_cellWidthSpinnerStateChanged

    private void gridWidthSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gridWidthSpinnerStateChanged
        setGridValues();
    }//GEN-LAST:event_gridWidthSpinnerStateChanged

    /* Настройка панели разметки изображения через передачу панели
        менеджера разметки. */
    private void setMarkUpCardPanel() {
        markUpImgPanel.setMarkingManager(markUpManager);
    }

    /* Переход на страницу разметки. */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        markUpManager.setGridParams(gridImgPanel.getGridParams());
        setMarkUpCardPanel();
        cardLayout = (CardLayout) mainPanel.getLayout();
        cardLayout.show(mainPanel, "markUpCard");
    }//GEN-LAST:event_nextButtonActionPerformed

    /* Переход к настройке следующего символа. */
    private void nextSymbolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextSymbolButtonActionPerformed
        markUpImgPanel.goToNextSequence();
        prevSymbolButton.setEnabled(!markUpImgPanel.isFirstSeq());
    }//GEN-LAST:event_nextSymbolButtonActionPerformed

    /* Возврат к странице нанесения решетки на изображение. */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        int res = JOptionPane.showConfirmDialog(this,
                    "All changes will be lost. Go back anyway?",
                    "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            switch (res) {
                case JOptionPane.YES_OPTION:
                    break;
                case JOptionPane.NO_OPTION:
                    return;
                case JOptionPane.CLOSED_OPTION:
                    return;
                default:
                    return;
            }
        
        cardLayout = (CardLayout) mainPanel.getLayout();
        cardLayout.show(mainPanel, "gridCard");
        markUpManager.clear();
    }//GEN-LAST:event_backButtonActionPerformed

    /* Завершение разметки. Разметка сохраняется в файл, окно закрывается. */
    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        SaveFileDialog saveDialog = new SaveFileDialog("Save markup");
        saveDialog.setFileFilter("Zodiac markup files", Settings.getInstance().getMarkUpFileExtension());
        saveDialog.setCurrentDirectory(Settings.getInstance().getLastDirectoryForMarkUpFile());
        int retrival = saveDialog.showSaveDialog(this);
        if (retrival == SaveFileDialog.APPROVE_OPTION) {
            markUpManager.saveToFile(saveDialog.getSelectedFile() + "");
            Settings.getInstance().setLastDirectoryForMarkUpFile(saveDialog.getCurrentDirectory());
        }
        listener.setMarkedFile(saveDialog.getSelectedFile() + "");
        this.dispose();
        setModality(false);
    }//GEN-LAST:event_doneButtonActionPerformed

    /* Переход к настройке предыдущего символа. */
    private void prevSymbolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevSymbolButtonActionPerformed
        markUpImgPanel.goToPrevSequence();
        prevSymbolButton.setEnabled(!markUpImgPanel.isFirstSeq());
    }//GEN-LAST:event_prevSymbolButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    /* При закрытии окна необходимо снять его модальность,
        чтобы сделать родительское окно доступным. */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setModality(false);
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JSpinner cellHeightSpinner;
    private javax.swing.JSpinner cellWidthSpinner;
    private javax.swing.JButton doneButton;
    private javax.swing.JPanel gridCardPanel;
    private javax.swing.JSpinner gridHeightSpinner;
    private zodiacdesktopapp.gui.markingdialog.GridImgPanel gridImgPanel;
    private javax.swing.JPanel gridPanel;
    private javax.swing.JSpinner gridWidthSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel markUpCardPanel;
    private zodiacdesktopapp.gui.markingdialog.MarkUpImgPanel markUpImgPanel;
    private javax.swing.JPanel markUpPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton nextSymbolButton;
    private javax.swing.JButton prevSymbolButton;
    private javax.swing.JSpinner xOffsetSpinner;
    private javax.swing.JSpinner yOffsetSpinner;
    // End of variables declaration//GEN-END:variables
}
